# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  go: circleci/go@1.7.1
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  test:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
        
    steps:
      - checkout

      - run:
          name: Linux launch common services
          command: |
            make ci-env-up project_compose_ci=ci/pod/docker-compose.common-arm64.yml

      - run:
          name: Linux Get dependencies
          command: |
            sudo apt-get update
            sudo apt install -y cpanminus build-essential libncurses5-dev libreadline-dev libssl-dev perl libpcre3 libpcre3-dev libldap2-dev

      - run:
          name: Build wasm code
          command: |
            export TINYGO_VER=0.20.0
            wget https://github.com/tinygo-org/tinygo/releases/download/v${TINYGO_VER}/tinygo_${TINYGO_VER}_arm.deb 2>/dev/null
            sudo dpkg -i tinygo_${TINYGO_VER}_arm.deb
            cd t/wasm && find . -type f -name "*.go" | xargs -Ip tinygo build -o p.wasm -scheduler=none -target=wasi p

      - run:
          name: Build xDS library
          command: |
            cd t/xds-library
            go build -o libxds.so -buildmode=c-shared main.go

      - run:
          name: Linux Before install
          command: |
            sudo ARCH=arm64 ./ci/linux_openresty_runner.sh before_install

      - run:
          name: Start Dubbo Backend
          command: |
            sudo apt install -y maven
            cd t/lib/dubbo-backend
            mvn package
            cd dubbo-backend-provider/target
            java -Djava.net.preferIPv4Stack=true -jar dubbo-demo-provider.one-jar.jar > /tmp/java.log &

      - run:
          name: Linux Install
          command: |
            sudo ARCH=arm64 ./ci/linux_openresty_runner.sh do_install

      - run:
          name: Linux Script
          environment:
            - TEST_FILE_SUB_DIR: '"t/plugin", "t/admin", "t/cli", "t/config-center-yaml", "t/core"'
          command: |
            sudo -E ARCH=arm64 ./ci/linux_openresty_runner.sh script

workflows:
  test-apisx:
    jobs:
      - test:
        filters:
          branches:
            only: master
